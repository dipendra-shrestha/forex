pipeline {
    agent any
    tools{
    maven 'Maven'
    }
    stages {
         stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('euro') {
                    // Optionally use a Maven environment you've configured already
                         sh 'mvn clean package sonar:sonar -Dsonar.projectKey=FOREX -Dsonar.host.url=http://167.99.252.236:9000 -Dsonar.login=a9440b3640695f1a128d67ee8f58f8199b858733'
                 }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                   // waitForQualityGate abortPipeline: true
                    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                    if (qg.status != 'OK') {
                      error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    }
                }
            }
        }
    }
}  
